{
 "kind": "pagespeedonline#result",
 "id": "http://sledoc.com.ua/",
 "responseCode": 200,
 "title": "Системы видеонаблюдения, контроль доступа, видеодомофоны в Киеве",
 "score": 86,
 "pageStats": {
  "numberResources": 103,
  "numberHosts": 12,
  "totalRequestBytes": "15020",
  "numberStaticResources": 86,
  "htmlResponseBytes": "46589",
  "cssResponseBytes": "336047",
  "imageResponseBytes": "424853",
  "javascriptResponseBytes": "1036877",
  "otherResponseBytes": "6389",
  "numberJsResources": 15,
  "numberCssResources": 6
 },
 "formattedResults": {
  "locale": "en_US",
  "ruleResults": {
   "AvoidLandingPageRedirects": {
    "localizedRuleName": "Avoid landing page redirects",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your page has no redirects. Learn more about avoiding landing page redirects.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/AvoidRedirects"
        }
       ]
      }
     }
    ]
   },
   "EnableGzipCompression": {
    "localizedRuleName": "Enable compression",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have compression enabled. Learn more about enabling compression.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/EnableCompression"
        }
       ]
      }
     }
    ]
   },
   "LeverageBrowserCaching": {
    "localizedRuleName": "Leverage browser caching",
    "ruleImpact": 2.989980158730159,
    "urlBlocks": [
     {
      "header": {
       "format": "Setting an expiry date or a maximum age in the HTTP headers for static resources instructs the browser to load previously downloaded resources from local disk rather than over the network."
      }
     },
     {
      "header": {
       "format": "Leverage browser caching for the following cacheable resources:",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/LeverageBrowserCaching"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "$1 (expiration not specified)",
         "args": [
          {
           "type": "URL",
           "value": "http://code.jivosite.com/script/widget/YgZqB2HF4g"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 ($2)",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/callme/js/callme.js"
          },
          {
           "type": "DURATION",
           "value": "3 minutes"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 ($2)",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/callme/templates/default/style.css"
          },
          {
           "type": "DURATION",
           "value": "3 minutes"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 ($2)",
         "args": [
          {
           "type": "URL",
           "value": "http://www.googletagmanager.com/gtm.js?id=GTM-KZTL6G"
          },
          {
           "type": "DURATION",
           "value": "15.9 minutes"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 ($2)",
         "args": [
          {
           "type": "URL",
           "value": "https://mc.yandex.ru/metrika/watch.js"
          },
          {
           "type": "DURATION",
           "value": "60 minutes"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1 ($2)",
         "args": [
          {
           "type": "URL",
           "value": "http://www.google-analytics.com/analytics.js"
          },
          {
           "type": "DURATION",
           "value": "2 hours"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "MainResourceServerResponseTime": {
    "localizedRuleName": "Reduce server response time",
    "ruleImpact": 0.7,
    "urlBlocks": [
     {
      "header": {
       "format": "In our test, your server responded in $1. There are many factors that can slow down your server response time. Please read our recommendations to learn how you can monitor and measure where your server is spending the most time.",
       "args": [
        {
         "type": "DURATION",
         "value": "0.27 seconds"
        },
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/Server"
        }
       ]
      }
     }
    ]
   },
   "MinifyCss": {
    "localizedRuleName": "Minify CSS",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your CSS is minified. Learn more about minifying CSS.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        }
       ]
      }
     }
    ]
   },
   "MinifyHTML": {
    "localizedRuleName": "Minify HTML",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your HTML is minified. Learn more about minifying HTML.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        }
       ]
      }
     }
    ]
   },
   "MinifyJavaScript": {
    "localizedRuleName": "Minify JavaScript",
    "ruleImpact": 0.0682,
    "urlBlocks": [
     {
      "header": {
       "format": "Compacting JavaScript code can save many bytes of data and speed up downloading, parsing, and execution time."
      }
     },
     {
      "header": {
       "format": "Minify JavaScript for the following resources to reduce their size by $2 ($3 reduction).",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/MinifyResources"
        },
        {
         "type": "BYTES",
         "value": "682B"
        },
        {
         "type": "PERCENTAGE",
         "value": "62%"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "Minifying $1 could save $2 ($3 reduction) after compression.",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/callme/js/config.js?_=1466769557830"
          },
          {
           "type": "BYTES",
           "value": "682B"
          },
          {
           "type": "PERCENTAGE",
           "value": "62%"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "MinimizeRenderBlockingResources": {
    "localizedRuleName": "Eliminate render-blocking JavaScript and CSS in above-the-fold content",
    "ruleImpact": 8.0,
    "urlBlocks": [
     {
      "header": {
       "format": "Your page has $1 blocking script resources and $2 blocking CSS resources. This causes a delay in rendering your page.",
       "args": [
        {
         "type": "INT_LITERAL",
         "value": "4"
        },
        {
         "type": "INT_LITERAL",
         "value": "4"
        }
       ]
      }
     },
     {
      "header": {
       "format": "None of the above-the-fold content on your page could be rendered without waiting for the following resources to load. Try to defer or asynchronously load blocking resources, or inline the critical portions of those resources directly in the HTML."
      }
     },
     {
      "header": {
       "format": "Remove render-blocking JavaScript:",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/BlockingJS"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/javascript/jquery/jquery-1.7.1.min.js.pagespeed.jm.Fmv3WDC1m8.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/javascript/jquery/ui/jquery-ui-1.8.16.custom.min.js.pagespeed.jm.GZhG5uBeth.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/javascript/jquery,_ui,_external,_jquery.cookie.js+jquery,_colorbox,_jquery.colorbox.js+jquery,_tabs.js+common.js+fast_order.js+tecart.js+jquery,_jquery.popupoverlay.min.js+cartpopup.js+jquery,_coin_slider,_coin-slider.min.js+jquery,_jquery.jcarousel.min.js.pagespeed.jc.Y5NzOOO8Mw.js"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/javascript/jquery/coin_slider/coin-slider.min.js.pagespeed.jm.hVMvoM4OuQ.js"
          }
         ]
        }
       }
      ]
     },
     {
      "header": {
       "format": "Optimize CSS Delivery of the following:",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/A.theme,,_default,,_stylesheet,,_cartpopup.css+javascript,,_jquery,,_coin_slider,,_coin-slider-styles.css+theme,,_tecart,,_stylesheet,,_carousel.css+theme,,_tecart,,_stylesheet,,_stylesheet-news.css,Mcc.58g9tKourM.css.pagespeed.cf.SrwSBGvBlh.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/javascript/jquery/ui/themes/ui-lightness/A.jquery-ui-1.8.16.custom.css.pagespeed.cf.Ug-7I1Z3Z6.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/javascript/jquery/colorbox/A.colorbox.css.pagespeed.cf.1xyi51vDgl.css"
          }
         ]
        }
       },
       {
        "result": {
         "format": "$1",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/theme/tecart/stylesheet/A.stylesheet.css+free_stickers.css+fast_order.css+adaptive.css,,q8,Mcc.cghZjglO8S.css.pagespeed.cf.AsOMv42heu.css"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "OptimizeImages": {
    "localizedRuleName": "Optimize images",
    "ruleImpact": 2.2109,
    "urlBlocks": [
     {
      "header": {
       "format": "Properly formatting and compressing images can save many bytes of data."
      }
     },
     {
      "header": {
       "format": "Optimize the following images to reduce their size by $2 ($3 reduction).",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/OptimizeImages"
        },
        {
         "type": "BYTES",
         "value": "7.5KiB"
        },
        {
         "type": "PERCENTAGE",
         "value": "26%"
        }
       ]
      },
      "urls": [
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/image/cache/data/manufacturers/motorola-logo-80x80.png.pagespeed.ce.RumMdyBbPR.png"
          },
          {
           "type": "BYTES",
           "value": "1.3KiB"
          },
          {
           "type": "PERCENTAGE",
           "value": "25%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/image/cache/data/arny/Arny-AVD-720M-220x220.jpg.pagespeed.ce._2IQaJGtCv.jpg"
          },
          {
           "type": "BYTES",
           "value": "911B"
          },
          {
           "type": "PERCENTAGE",
           "value": "16%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/theme/tecart/image/stars-5.png.pagespeed.ce.0thErRUHys.png"
          },
          {
           "type": "BYTES",
           "value": "888B"
          },
          {
           "type": "PERCENTAGE",
           "value": "76%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/theme/tecart/image/footer-bg.png.pagespeed.ce.ewgRoundtX.png"
          },
          {
           "type": "BYTES",
           "value": "846B"
          },
          {
           "type": "PERCENTAGE",
           "value": "82%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/theme/tecart/image/top-line-bg.png.pagespeed.ce.QQUh26cyUe.png"
          },
          {
           "type": "BYTES",
           "value": "844B"
          },
          {
           "type": "PERCENTAGE",
           "value": "80%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/image/cache/data/manufacturers/xiaomi-logo-80x80.jpg.pagespeed.ce.3yZiUykKfS.jpg"
          },
          {
           "type": "BYTES",
           "value": "695B"
          },
          {
           "type": "PERCENTAGE",
           "value": "25%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/image/cache/data/manufacturers/full,P20energy-80x80.jpg.pagespeed.ce.ofD5ad804t.jpg"
          },
          {
           "type": "BYTES",
           "value": "557B"
          },
          {
           "type": "PERCENTAGE",
           "value": "19%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/image/cache/data/arny/ARNY-AVD-720M-Wi-Fi-2-100x100.jpg.pagespeed.ce.YXYnWR08gl.jpg"
          },
          {
           "type": "BYTES",
           "value": "536B"
          },
          {
           "type": "PERCENTAGE",
           "value": "12%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/catalog/view/theme/tecart/image/sticker_top.png.pagespeed.ce.DouNuCmwfb.png"
          },
          {
           "type": "BYTES",
           "value": "534B"
          },
          {
           "type": "PERCENTAGE",
           "value": "25%"
          }
         ]
        }
       },
       {
        "result": {
         "format": "Losslessly compressing $1 could save $2 ($3 reduction).",
         "args": [
          {
           "type": "URL",
           "value": "http://sledoc.com.ua/image/cache/data/manufacturers/Faraday,P20Electronics-80x80.gif.pagespeed.ce.IEabgseuCr.gif"
          },
          {
           "type": "BYTES",
           "value": "515B"
          },
          {
           "type": "PERCENTAGE",
           "value": "26%"
          }
         ]
        }
       }
      ]
     }
    ]
   },
   "PrioritizeVisibleContent": {
    "localizedRuleName": "Prioritize visible content",
    "ruleImpact": 0.0,
    "urlBlocks": [
     {
      "header": {
       "format": "You have the above-the-fold content properly prioritized. Learn more about prioritizing visible content.",
       "args": [
        {
         "type": "HYPERLINK",
         "value": "https://developers.google.com/speed/docs/insights/PrioritizeVisibleContent"
        }
       ]
      }
     }
    ]
   }
  }
 },
 "version": {
  "major": 1,
  "minor": 15
 }
}
